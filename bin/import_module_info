#!/usr/bin/php
<?php
$path_to_base_dir = "../"; 
require_once($path_to_base_dir.'includes.php');
#R::debug(true);

if (count($argv) < 2)
{
	echo "you must specifiy a file to import\n";
	exit;
}
$file = fopen( $argv[1], "r" ) or die("file does not exist");
$info = array();

tick("started spreadsheet");
fgets($file); # chuck the headings away

while( $line = fgets($file) )
{
	$line = explode("|", $line);
	if(!is_array($line) or count($line) < 10){ print("Something is wrong this line has no data\n"); continue; }
	####### TODO, reading the data file should be abstracted, this is blatently something which will change
	$info[$line[0]][$line[10]]["title"] = $line[44];
	$info[$line[0]][$line[10]]["departmentcode"] = $line[6];
	$info[$line[0]][$line[10]]["departmentname"] = $line[7];
	$info[$line[0]][$line[10]]["facultycode"] = $line[4];
	$info[$line[0]][$line[10]]["facultyname"] = $line[5];
	$info[$line[0]][$line[10]]["semestercode"] = $line[17];
	$info[$line[0]][$line[10]]["semestername"] = $line[18];
	$info[$line[0]][$line[10]]["levelcode"] = $line[35];
	$info[$line[0]][$line[10]]["credits"] = $line[19];
	if($staff_id = trim($line[29]))
	{
		$info[$line[0]][$line[10]]["people"][$staff_id] = 1;
		$people[$staff_id]["first_name"] = trim($line[31]);
		$people[$staff_id]["last_name"] = trim($line[30]);
	}

	if($program_code = trim($line[36]))
	{
		$programs[$line[0]][$program_code]["title"] = $line[37];
	}
	if($major_code = trim($line[38]))
	{
		# 10 - course_code
		# 40 - year_of_study
		# 43 - module_type
		# 38 = major_code
		# 39 = major_desc (title)
		# 0 = session
		$majors[$line[0]][$major_code]["title"] = $line[39];
		$majors[$line[0]][$major_code]["programcode"] = trim($line[36]);
		$majors[$line[0]][$major_code]["modules"][$line[10]] = array(
			"yearofstudy"=>$line[40],
			"type"=>$line[43] );
	}
}
tick("finished spreadsheet");
print "People import\n";
$dbpeople = R::findAll("person");
$dbpeoplehash =array();
foreach($dbpeople as $person)
{
	$dbpeoplehash[$person->staffid] = $person;
}

foreach( $people as $staff_id => $people_properties )
{
	#$person = R::findOne("person", "staffid = ?", array( $staff_id ) );
	if(array_key_exists($staff_id, $dbpeoplehash))
	{
		$person = $dbpeoplehash[$staff_id];
	}
	if(!isset($person))
	{
		$person = R::dispense("person");
		$person->staffid = $staff_id;
		$dbpeoplehash[$staff_id] = $person;
	}
#always update staff name for cases of name change in data. This could be optimized if necessary.
	$person->firstname = $people[$staff_id]["first_name"];
	$person->lastname = $people[$staff_id]["last_name"];
	
	#R::store($person);
}
echo count(array_values($dbpeoplehash))." - people\n";
tick("people objects changed\n");
#R::storeAll(array_values($dbpeoplehash));
tick("people in the db now\n");
$module_beans = array();
print "Modules import\n";

$moduledb = R::findAll("module");
$moduledbhash = array();
foreach($moduledb as $module)
{
	$moduledbhash[$module->session][$module->code] = $module;
}

foreach( $info as $session => $modules)
{
	foreach($modules as $module_code => $properties )
	{
		#$module = R::findOne("module", "session = ? AND code = ?", array( $session, $module_code ) );
		$module = @$moduledbhash[$session][$module_code];
		
		if(!isset($module)){
			$module = R::dispense('module');
			$module->code = $module_code;
			$module->session = $session;
			$moduledbhash[$session][$module_code] = $module;
		}

		$module->title = $properties["title"];
		$module->facultycode = $properties["facultycode"];
		$module->facultyname = $properties["facultyname"];
		$module->semestercode = $properties["semestercode"];
		$module->semestername = $properties["semestername"];
		$module->departmentcode = $properties["departmentcode"];
		$module->departmentname = $properties["departmentname"];
		$module->levelcode = $properties["levelcode"];
		$module->credits = $properties["credits"];
		if( !empty($properties["people"]) )
		{	
			$people = array_keys($properties["people"]);
			$module->sharedPerson = R::find('person', ' staffid IN ('.R::genSlots($people).') ', $people);
		}
		#R::store($module);

		$module_beans[$session][$module_code] = $module;
	}
	
}

tick("before storing modules");
foreach($moduledbhash as $session => $module_code)
{
	R::storeAll(array_values($module_code));
}
tick("after storing all modules");
exit;

$program_beans = array();
print "Programs import\n";
foreach( $programs as $session=>$session_programs )
{
	foreach($session_programs as $program_code => $program_properties)
	{
		$program = R::findOne("program", "code = ? AND session = ?", array($program_code, $session ) );
		
		if(!isset($program))
		{
			$program = R::dispense('program');	
			$program->code = $program_code;
			$program->session = $session;
		}
	
		$program->title = $program_properties["title"];
	
		R::store($program);

		$program_beans[$session][$program_code] = $program;
	}
}


		
	



R::wipe( "modulemajorrelation" );

print "Majors import\n";
foreach( $majors as $session=>$session_majors )
{
	foreach( $session_majors as $major_code => $major_properties )
	{
		$major = R::findOne("major", "code = ? AND session = ?", array($major_code,$session ) );
	
		if(!isset($major))
		{
			$major = R::dispense('major');
			$major->code = $major_code;
			$major->session = $session;
		}
	
		$major->title = $major_properties["title"];
		$major->program = $program_beans[$session][ $major_properties["programcode"] ];

		R::store($major);

		if( !empty($major_properties["modules"]) )
		{
			foreach( $major_properties["modules"] as $module_code=>$rel_info )
			{
				$module = $module_beans[$session][$module_code];
				$relation = R::dispense('modulemajorrelation');
				$relation->session = $session; # not strictly needed
				$relation->yearofstudy = $rel_info["yearofstudy"];
				$relation->type = $rel_info["type"];
				$relation->module = $module;
				$relation->major = $major;
				R::store( $relation );
			}
				
		}
	}
}

